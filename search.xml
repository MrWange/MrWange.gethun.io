<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>qs插件</title>
      <link href="/2023/05/29/qs%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/29/qs%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="vue后台传参出现问题"><a href="#vue后台传参出现问题" class="headerlink" title="vue后台传参出现问题"></a>vue后台传参出现问题</h1><ul><li>在添加表单按钮post传参时无法正常的传递数据。之后通过搜索发现原因是传递参数要将参数序列化。<br>使用第三方工具qs来处理参数。</li></ul><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><h2 id="首先先下载："><a href="#首先先下载：" class="headerlink" title="首先先下载："></a>首先先下载：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i qs </span><br></pre></td></tr></table></figure><h2 id="引入-："><a href="#引入-：" class="headerlink" title="引入 ："></a>引入 ：</h2><p>main.js<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import qs from &#x27;qs&#x27;</span><br><span class="line">Vue.use(qs)</span><br></pre></td></tr></table></figure></p><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import qs from &#x27;qs&#x27;</span><br></pre></td></tr></table></figure><h2 id="qs主要有两个方法-："><a href="#qs主要有两个方法-：" class="headerlink" title="qs主要有两个方法 ："></a>qs主要有两个方法 ：</h2><div class="tabs" id="方法一"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方法一-1">方法一 1</button></li><li class="tab"><button type="button" data-href="#方法一-2">方法二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方法一-1"><p>将对象序列化成URL的形式，多个对象之间用&amp;拼接（拼接是由底层处理，无需手动操作）<br>qs.stringify() 转换成查询字符串<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let qsdata = qs.stringify(&#123;</span><br><span class="line">     username: &quot;coderkey&quot;,</span><br><span class="line">     password: &quot;123456&quot;,</span><br><span class="line"> &#125;);</span><br><span class="line">  // username=coderkey&amp;password=123456</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方法一-2"><p>将URL解析成对象的形式（将序列化的内容拆分成一个个单一的对象）<br>qs.parse() 转换成json对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let qsdata = qs.parse(&#123;</span><br><span class="line">     &quot;username&quot;: &quot;coderkey&quot;,</span><br><span class="line">     &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line"> &#125;);</span><br><span class="line">// &#123;username: &#x27;coderkey&#x27;, password: &#x27;123456&#x27;&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="vue中post传参数据为空：可以用下面的方法解决"><a href="#vue中post传参数据为空：可以用下面的方法解决" class="headerlink" title="vue中post传参数据为空：可以用下面的方法解决"></a>vue中post传参数据为空：可以用下面的方法解决</h2><p>组件引入：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import qs from &#x27;qs’</span><br></pre></td></tr></table></figure><br>使用：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qs.parse(qs.stringify(数据))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3封装storage实现token验证</title>
      <link href="/2023/05/29/vue3%E5%B0%81%E8%A3%85storage%E5%AE%9E%E7%8E%B0token%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/05/29/vue3%E5%B0%81%E8%A3%85storage%E5%AE%9E%E7%8E%B0token%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="验证思路"><a href="#验证思路" class="headerlink" title="验证思路"></a>验证思路</h2><ul><li>登录成功返回 token</li><li>拿到token，将token存储到localStorage，并跳转路由页面</li><li>跳转路由，就判断 localStroage 中有无 token</li><li>调后端接口，都要在请求头中加token</li><li>前端拿到状态码为401，就清除token信息并跳转到登录页面</li></ul><h2 id="storage封装"><a href="#storage封装" class="headerlink" title="storage封装"></a>storage封装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 封装操作localstorage本地存储的方法</span><br><span class="line"> */</span><br><span class="line">export const storage = &#123;</span><br><span class="line">  //存储</span><br><span class="line">  set(key: string, value: any) &#123;</span><br><span class="line">    localStorage.setItem(key, JSON.stringify(value))</span><br><span class="line">  &#125;,</span><br><span class="line">  //取出数据</span><br><span class="line">  get&lt;T&gt;(key: string) &#123;</span><br><span class="line">    const value = localStorage.getItem(key)</span><br><span class="line">    if (value &amp;&amp; value != &quot;undefined&quot; &amp;&amp; value != &quot;null&quot;) &#123;</span><br><span class="line">      return &lt;T&gt;JSON.parse(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 删除数据</span><br><span class="line">  remove(key: string) &#123;</span><br><span class="line">    localStorage.removeItem(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 封装操作sessionStorage本地存储的方法</span><br><span class="line"> */</span><br><span class="line">export const sessionStorage = &#123;</span><br><span class="line">  //存储</span><br><span class="line">  set(key: string, value: any) &#123;</span><br><span class="line">    window.sessionStorage.setItem(key, JSON.stringify(value))</span><br><span class="line">  &#125;,</span><br><span class="line">  //取出数据</span><br><span class="line">  get&lt;T&gt;(key: string) &#123;</span><br><span class="line">    const value = window.sessionStorage.getItem(key)</span><br><span class="line">    if (value &amp;&amp; value != &quot;undefined&quot; &amp;&amp; value != &quot;null&quot;) &#123;</span><br><span class="line">      return JSON.parse(value)</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">  &#125;,</span><br><span class="line">  // 删除数据</span><br><span class="line">  remove(key: string) &#123;</span><br><span class="line">    window.sessionStorage.removeItem(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="login-vue"><a href="#login-vue" class="headerlink" title="login.vue"></a>login.vue</h2><p>登录成功后进行token保存<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Routers &#125; from &#x27;@/hooks/routers&#x27;</span><br><span class="line">import &#123; user &#125; from &#x27;@/api/index&#x27;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; storage &#125; from &#x27;@/utils/storage/storage&#x27;</span><br><span class="line">const stores = useStore()</span><br><span class="line">const state = reactive(&#123;</span><br><span class="line">  user: &#x27;kai&#x27;,</span><br><span class="line">  pwd: &#x27;kai&#x27;,</span><br><span class="line">  result: [],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">async function login() &#123;</span><br><span class="line">  user.Login(state.user, state.pwd).then((res) =&gt; &#123;</span><br><span class="line">    state.result = res.data.split(&#x27;,&#x27;)</span><br><span class="line">    if (state.result[0] === &#x27;1&#x27;) &#123;</span><br><span class="line">      storage.set(&#x27;token&#x27;, &#x27;Bearer &#x27; + state.result[1])</span><br><span class="line">      Routers(&#x27;/Admin-index/ArticleTable&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="axios-ts"><a href="#axios-ts" class="headerlink" title="axios.ts"></a>axios.ts</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">  if (</span><br><span class="line">    config.method === &quot;post&quot; ||</span><br><span class="line">    config.method === &quot;put&quot; ||</span><br><span class="line">    config.method === &quot;delete&quot;</span><br><span class="line">  ) &#123;</span><br><span class="line">    // qs序列化</span><br><span class="line">    config.data = qs.parse(config.data);</span><br><span class="line">  &#125;</span><br><span class="line">  // 鉴权token , 给头部带上token</span><br><span class="line">  if (storage.get(&#x27;token&#x27;)) &#123;</span><br><span class="line">    config.headers.Authorization = storage.get(&#x27;token&#x27;);</span><br><span class="line">    console.log(&#x27;%c [  config.headers.Authorization ]&#x27;, &#x27;font-size:13px; background:pink; color:#bf2c9f;&#x27;, config.headers.Authorization)</span><br><span class="line">  &#125;</span><br><span class="line">  return config;</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  return Promise.reject(error.data.error.message);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 导航守卫</span><br><span class="line">// 使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.path === &quot;/Login&quot;) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    const token = storage.get(&#x27;token&#x27;)</span><br><span class="line">    if (token === undefined || token === &quot;&quot;) &#123;</span><br><span class="line">      next(&quot;/Login&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.cnblogs.com/ouyangkai/p/15424713.html">原文地址</a></div>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app的小知识</title>
      <link href="/2023/05/29/uni-app%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/05/29/uni-app%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="uniapp微信小程序隐藏右上角胶囊"><a href="#uniapp微信小程序隐藏右上角胶囊" class="headerlink" title="uniapp微信小程序隐藏右上角胶囊"></a>uniapp微信小程序隐藏右上角胶囊</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;navigationBarRightButton&quot;: &#123;</span><br><span class="line">      &quot;hide&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/uni-app-jiaonang.png"/></div></div><h1 id="uniapp发布H5，去掉标题栏"><a href="#uniapp发布H5，去掉标题栏" class="headerlink" title="uniapp发布H5，去掉标题栏"></a>uniapp发布H5，去掉标题栏</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;navigationStyle&quot;: &quot;custom&quot;,</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/uni-app-title.png"/></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的JS方法</title>
      <link href="/2023/05/29/%E6%88%91%E7%9A%84JS%E6%96%B9%E6%B3%95/"/>
      <url>/2023/05/29/%E6%88%91%E7%9A%84JS%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="时间处理方法"><a href="#时间处理方法" class="headerlink" title="时间处理方法"></a>时间处理方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123;</span><br><span class="line">// 时间间隔函数</span><br><span class="line">getTimeAgo:function(date) &#123;</span><br><span class="line">  const ONE_SECOND = 1000;</span><br><span class="line">  const ONE_MINUTE = ONE_SECOND * 60;</span><br><span class="line">  const ONE_HOUR = ONE_MINUTE * 60;</span><br><span class="line">  const ONE_DAY = ONE_HOUR * 24;</span><br><span class="line">  const ONE_WEEK = ONE_DAY * 7;</span><br><span class="line"></span><br><span class="line">  const now = new Date().getTime();</span><br><span class="line">  const diff = now - date.getTime();</span><br><span class="line"></span><br><span class="line">  if (diff &lt; ONE_MINUTE) &#123; // 不足1分钟</span><br><span class="line">    return `$&#123;Math.floor(diff / ONE_SECOND)&#125;秒前`;</span><br><span class="line">  &#125; else if (diff &lt; ONE_HOUR) &#123; // 不足1小时</span><br><span class="line">    return `$&#123;Math.floor(diff / ONE_MINUTE)&#125;分钟前`;</span><br><span class="line">  &#125; else if (diff &lt; ONE_DAY) &#123; // 不足1天</span><br><span class="line">    return `$&#123;Math.floor(diff / ONE_HOUR)&#125;小时前`;</span><br><span class="line">  &#125; else if (diff &lt; ONE_WEEK) &#123; // 不足7天</span><br><span class="line">    return `$&#123;Math.floor(diff / ONE_DAY)&#125;天前`;</span><br><span class="line">  &#125; else &#123; // 大于等于7天</span><br><span class="line">    const year = date.getFullYear();</span><br><span class="line">    let month = date.getMonth() + 1;</span><br><span class="line">    let day = date.getDate();</span><br><span class="line">    month = month &lt; 10 ? &#x27;0&#x27; + month : month;</span><br><span class="line">    day = day &lt; 10 ? &#x27;0&#x27; + day : day;</span><br><span class="line">    return `$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// const date = new Date(&#x27;2022-11-11 00:00:00&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default user // 导出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6数组操作</title>
      <link href="/2023/05/29/ES6%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/05/29/ES6%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6新增新操作数组的方法"><a href="#ES6新增新操作数组的方法" class="headerlink" title="ES6新增新操作数组的方法"></a>ES6新增新操作数组的方法</h1><h2 id="find-："><a href="#find-：" class="headerlink" title="find()："></a>find()：</h2><p>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, &quot;2&quot;, 3, 3, &quot;2&quot;]</span><br><span class="line">console.log(arr.find(n =&gt; typeof n === &quot;number&quot;)) // 1</span><br></pre></td></tr></table></figure></p><h2 id="findIndex-："><a href="#findIndex-：" class="headerlink" title="findIndex()："></a>findIndex()：</h2><p>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它的下标，终止搜索。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, &quot;2&quot;, 3, 3, &quot;2&quot;]</span><br><span class="line">console.log(arr.findIndex(n =&gt; typeof n === &quot;number&quot;)) // 0</span><br></pre></td></tr></table></figure></p><h2 id="fill-："><a href="#fill-：" class="headerlink" title="fill()："></a>fill()：</h2><p>用新元素替换掉数组内的元素，可以指定替换下标范围。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value, start, end)</span><br></pre></td></tr></table></figure></p><h2 id="copyWithin-："><a href="#copyWithin-：" class="headerlink" title="copyWithin()："></a>copyWithin()：</h2><p>选择数组的某个下标，从该位置开始复制数组元素，默认从0开始复制。也可以指定要复制的元素范围。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target, start, end)</span><br><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line">console.log(arr.copyWithin(3))</span><br><span class="line"> // [1,2,3,1,2] 从下标为3的元素开始，复制数组，所以4, 5被替换成1, 2</span><br><span class="line">const arr1 = [1, 2, 3, 4, 5]</span><br><span class="line">console.log(arr1.copyWithin(3, 1)) </span><br><span class="line">// [1,2,3,2,3] 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，所以4, 5被替换成2, 3</span><br><span class="line">const arr2 = [1, 2, 3, 4, 5]</span><br><span class="line">console.log(arr2.copyWithin(3, 1, 2)) </span><br><span class="line">// [1,2,3,2,5] 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，结束位置为2，所以4被替换成2</span><br></pre></td></tr></table></figure></p><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p>将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const bar = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br><span class="line">Array.from(bar);</span><br><span class="line">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line"> </span><br><span class="line">Array.from(&#x27;foo&#x27;);</span><br><span class="line">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure></p><h2 id="of"><a href="#of" class="headerlink" title="of"></a>of</h2><p>用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array() // []</span><br><span class="line">Array(3) // [, , ,]</span><br><span class="line">Array(3, 11, 8) // [3, 11, 8]</span><br><span class="line">Array.of(7);       // [7]</span><br><span class="line">Array.of(1, 2, 3); // [1, 2, 3]</span><br><span class="line"> </span><br><span class="line">Array(7);          // [ , , , , , , ]</span><br><span class="line">Array(1, 2, 3);    // [1, 2, 3]</span><br></pre></td></tr></table></figure></p><h2 id="entries-返回迭代器：返回键值对"><a href="#entries-返回迭代器：返回键值对" class="headerlink" title="entries() 返回迭代器：返回键值对"></a>entries() 返回迭代器：返回键值对</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//数组</span><br><span class="line">const arr = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">for(let v of arr.entries()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// [0, &#x27;a&#x27;] [1, &#x27;b&#x27;] [2, &#x27;c&#x27;]</span><br><span class="line"> </span><br><span class="line">//Set</span><br><span class="line">const arr = new Set([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]);</span><br><span class="line">for(let v of arr.entries()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// [&#x27;a&#x27;, &#x27;a&#x27;] [&#x27;b&#x27;, &#x27;b&#x27;] [&#x27;c&#x27;, &#x27;c&#x27;]</span><br><span class="line"> </span><br><span class="line">//Map</span><br><span class="line">const arr = new Map();</span><br><span class="line">arr.set(&#x27;a&#x27;, &#x27;a&#x27;);</span><br><span class="line">arr.set(&#x27;b&#x27;, &#x27;b&#x27;);</span><br><span class="line">for(let v of arr.entries()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// [&#x27;a&#x27;, &#x27;a&#x27;] [&#x27;b&#x27;, &#x27;b&#x27;]</span><br></pre></td></tr></table></figure><h2 id="values-返回迭代器：返回键值对的value"><a href="#values-返回迭代器：返回键值对的value" class="headerlink" title="values() 返回迭代器：返回键值对的value"></a>values() 返回迭代器：返回键值对的value</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//数组</span><br><span class="line">const arr = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">for(let v of arr.values()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">//&#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br><span class="line"> </span><br><span class="line">//Set</span><br><span class="line">const arr = new Set([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]);</span><br><span class="line">for(let v of arr.values()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br><span class="line"> </span><br><span class="line">//Map</span><br><span class="line">const arr = new Map();</span><br><span class="line">arr.set(&#x27;a&#x27;, &#x27;a&#x27;);</span><br><span class="line">arr.set(&#x27;b&#x27;, &#x27;b&#x27;);</span><br><span class="line">for(let v of arr.values()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// &#x27;a&#x27; &#x27;b&#x27;</span><br></pre></td></tr></table></figure><h2 id="keys-返回迭代器：返回键值对的key"><a href="#keys-返回迭代器：返回键值对的key" class="headerlink" title="keys() 返回迭代器：返回键值对的key"></a>keys() 返回迭代器：返回键值对的key</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//数组</span><br><span class="line">const arr = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">for(let v of arr.keys()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// 0 1 2</span><br><span class="line"> </span><br><span class="line">//Set</span><br><span class="line">const arr = new Set([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]);</span><br><span class="line">for(let v of arr.keys()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br><span class="line"> </span><br><span class="line">//Map</span><br><span class="line">const arr = new Map();</span><br><span class="line">arr.set(&#x27;a&#x27;, &#x27;a&#x27;);</span><br><span class="line">arr.set(&#x27;b&#x27;, &#x27;b&#x27;);</span><br><span class="line">for(let v of arr.keys()) &#123;</span><br><span class="line">  console.log(v)</span><br><span class="line">&#125;</span><br><span class="line">// &#x27;a&#x27; &#x27;b&#x27;</span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1, 2, 3];</span><br><span class="line">a.includes(2); // true</span><br><span class="line">a.includes(4); // false</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS字符串和数组常用方法汇总</title>
      <link href="/2023/05/29/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2023/05/29/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法"></a>字符方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 1 字符方法</span><br><span class="line">charAt()    //获取指定位置处字符</span><br><span class="line">charCodeAt()  //获取指定位置处字符的ASCII码</span><br><span class="line"> </span><br><span class="line">// 2 字符串操作方法</span><br><span class="line">concat()   //拼接字符串，等效于+，+更常用</span><br><span class="line">slice()    //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substring() //从start位置开始，截取到end位置，end取不到</span><br><span class="line">substr()   //从start位置开始，截取length个字符</span><br><span class="line"> </span><br><span class="line">// 3 位置方法</span><br><span class="line">indexOf()   //返回指定内容在元字符串中的位置，从前往后找第一个</span><br><span class="line">lastIndexOf() //从后往前找，只找第一个匹配的</span><br><span class="line"> </span><br><span class="line">// 4 去除空白   </span><br><span class="line">trim()  // 只能去除字符串前后的空白，字符串之间的空格不能去掉</span><br><span class="line"> </span><br><span class="line">// 5 大小写转换方法</span><br><span class="line">to(Locale)UpperCase() //转换大写</span><br><span class="line">to(Locale)LowerCase() //转换小写</span><br><span class="line"> </span><br><span class="line">// 6 其它</span><br><span class="line">search()  // 不存在返回-1，search支持正则。</span><br><span class="line">replace() // 替换</span><br><span class="line">split() // 返回数组</span><br><span class="line">fromCharCode()</span><br><span class="line">// String.fromCharCode(101, 102, 103); //把ASCII码转换成字符串</span><br></pre></td></tr></table></figure><h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//数组方法</span><br><span class="line"> </span><br><span class="line">push()，向数组的末尾添加一个或多个元素，并返回新的数组长度。原数组改变</span><br><span class="line"> </span><br><span class="line">pop()，删除并返回数组的最后一个元素，若该数组为空，则返回undefined。原数组改变</span><br><span class="line"> </span><br><span class="line">unshift()，向数组的开头添加一个或多个元素，并返回新的数组长度。原数组改变</span><br><span class="line"> </span><br><span class="line">shift()，删除数组的第一项，并返回第一个元素的值。若该数组为空，则返回undefined。原数组改变。</span><br><span class="line"> </span><br><span class="line">concat(arr1,arr2…)，合并两个或多个数组，生成一个新的数组。原数组不变</span><br><span class="line"> </span><br><span class="line">join()，将数组的每一项用指定字符连接形成一个字符串。默认连接字符为 “,” 逗号</span><br><span class="line"> </span><br><span class="line">reverse()，将数组倒序。原数组改变。</span><br><span class="line"> </span><br><span class="line">sort()，对数组元素进行排序。按照字符串UniCode码排序，原数组改变</span><br><span class="line"> </span><br><span class="line">map(function)，原数组的每一项执行函数后，返回一个新的数组。原数组不变</span><br><span class="line"> </span><br><span class="line">slice(start,end)，从start开始，end之前结束，不到end；如果不给end值，从start开始到数组结束。start可以给负值，-1表示数组最后位置，-2表示倒数第二个，以此类推，顾前不顾后。</span><br><span class="line"> </span><br><span class="line">splice(index,howmany,arr1,arr2…) ，删除元素并添加元素，从index位置开始删除howmany个元素，并将arr1、arr2…数据从index位置依次插入。howmany为0时，则不删除元素。原数组改变。</span><br><span class="line"> </span><br><span class="line">forEach(function)，用于调用数组的每个元素，并将元素传递给回调函数。原数组不变。（注意该方法和map的区别，若直接打印Array.forEach，结果为undefined）</span><br><span class="line"> </span><br><span class="line">filter(function)，过滤数组中，符合条件的元素并返回一个新的数组</span><br><span class="line"> </span><br><span class="line">every(function)，对数组中的每一项进行判断，若都符合则返回true，否则返回false。</span><br><span class="line"> </span><br><span class="line">Array.some(function)，对数组中的每一项进行判断，若都不符合则返回false，否则返回true。</span><br><span class="line"> </span><br><span class="line">Array.reduce(function)，reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组常用方法</title>
      <link href="/2023/05/29/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/2023/05/29/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="for-in一般用于遍历对象的属性"><a href="#for-in一般用于遍历对象的属性" class="headerlink" title="for..in一般用于遍历对象的属性"></a>for..in一般用于遍历对象的属性</h2><ul><li>作用于数组的for in除了会遍历数组元素外,还会遍历自定义可枚举的属性,以及原型链上可枚举的属性;</li><li>作用于数组的for in的遍历结果是数组的索引,且都为字符串型,不能用于运算;</li><li>某些情况下,可能按照随机顺序遍历数组元素<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-for-in.png"/></div></div></li></ul><h2 id="for-of一般用于遍历对象的属性"><a href="#for-of一般用于遍历对象的属性" class="headerlink" title="for..of一般用于遍历对象的属性"></a>for..of一般用于遍历对象的属性</h2><ul><li>es6中添加的循环语法；</li><li>for of支持遍历数组、类对象(例如：DOM NodeList)、字符串、map对象、Set对象</li><li>.for of不支持遍历普通对象，可通过与Object.keys()搭配使用遍历（例子2）;</li><li>for of 遍历后的输出结果为数组元素的值；</li><li>搭配实例方法entries(),同时输出数组内容弄和索引<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-for-of.png"/></div></div></li></ul><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><ul><li>遍历结果为对象自身可枚举属性组成的数组，数组中的属性名排列顺序与使用for in循环遍历该对象时返回的顺序一致，</li><li>与for in区别在于不能遍历出原型链上的属性<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-object.keys.png"/></div></div></li></ul><h2 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h2><ul><li>遍历结果为对象自身可枚举属性的值组成的数组，数组中的属性名排列顺序与使用for of循环遍历该对象时返回的顺序一致，</li><li>与for of区别在于不能遍历出原型链上的属性<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-object.values.png"/></div></div></li></ul><h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h2><ul><li>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。(相当于Object.keys()和Object.values()的结合)<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-object.entries.png"/></div></div></li></ul><h2 id="reduce-func-cur-gt-return-…"><a href="#reduce-func-cur-gt-return-…" class="headerlink" title="reduce((func,cur)=&gt;{return …},[])"></a>reduce((func,cur)=&gt;{return …},[])</h2><ul><li><p>我遇到的情况比较多的是两个参数,第一个参数代表<a href="不局限于[]，什么都可以，这里只是一个例子"></a>，cur代表的是遍历的数组中的各个元素…算了大家别看我写的这个了，我自己也就勉勉强强能理解，你们直接去链接吧。</p><p>对于这个方法了解较少，所以详情大家可以参照链接</p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://cloud.tencent.com/developer/section/1191538">array.reduce (Array) - JavaScript 中文开发手册 - 开发者手册 - 云+社区 - 腾讯云 (tencent.com)</a></div></li></ul><h2 id="array-indexOf"><a href="#array-indexOf" class="headerlink" title="array.indexOf()"></a>array.indexOf()</h2><ul><li>判断是否含有某个元素，返回值为索引，若没有返回-1</li></ul><h2 id="array-includes"><a href="#array-includes" class="headerlink" title="array.includes()"></a>array.includes()</h2><ul><li>判断是否含有某个元素，返回值true或false</li></ul><h2 id="array-fill"><a href="#array-fill" class="headerlink" title="array.fill()"></a>array.fill()</h2><ul><li>作用是使用一个固定值来替换数组中的元素。该固定值可以是字母、数字、字符串、数组等等。fill()方法还有两个可选参数，表示填充的起始位置和结束位置。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-array.fill-1.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-array.fill-2.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-array.fill-3.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/list-array.fill-4.png"/></div></div></li></ul><h2 id="array-push-a"><a href="#array-push-a" class="headerlink" title="array.push(a)"></a>array.push(a)</h2><ul><li>从数组尾部添加一个元素</li></ul><h2 id="array-pop"><a href="#array-pop" class="headerlink" title="array.pop()"></a>array.pop()</h2><ul><li>从数组尾部删除一个元素，返回被删除的元素</li></ul><h2 id="array-shift"><a href="#array-shift" class="headerlink" title="array.shift()"></a>array.shift()</h2><ul><li>从数组头部删除一个元素，返回被删除的元素</li></ul><h2 id="array-unshift-a"><a href="#array-unshift-a" class="headerlink" title="array.unshift(a)"></a>array.unshift(a)</h2><ul><li>从数组头部添加一个元素</li></ul><h2 id="array-concat-a-b"><a href="#array-concat-a-b" class="headerlink" title="array.concat(a,b)"></a>array.concat(a,b)</h2><ul><li>合并数组a，b返回新数组，不影响原数组</li></ul><h2 id="array-splice"><a href="#array-splice" class="headerlink" title="array.splice()"></a>array.splice()</h2><ul><li><p>可以在指定位置删除或者添加指定元素</p><p>若删除元素</p><p>两个参数：第一个参数为删除的数量，第二个参数为开始删除的位置</p><p>若添加元素</p><p>参数：第一个元素为添加的数量，第二个参数为0（表示不删除元素），后续为要添加的具体元素</p></li></ul><h2 id="array-slice"><a href="#array-slice" class="headerlink" title="array.slice()"></a>array.slice()</h2><ul><li>截取指定位置的元素并返回<br>两个参数：开始位置和结束位置</li></ul><h2 id="array-reverse"><a href="#array-reverse" class="headerlink" title="array.reverse()"></a>array.reverse()</h2><ul><li>反转原数组</li></ul><h2 id="array-join"><a href="#array-join" class="headerlink" title="array.join()"></a>array.join()</h2><ul><li>通过指定的分隔符(参数)将数组转化为字符串。</li></ul><h1 id="字符串（字符串也可以视为数组，运用数组中的一些方法）"><a href="#字符串（字符串也可以视为数组，运用数组中的一些方法）" class="headerlink" title="字符串（字符串也可以视为数组，运用数组中的一些方法）"></a>字符串（字符串也可以视为数组，运用数组中的一些方法）</h1><h2 id="repeat方法"><a href="#repeat方法" class="headerlink" title="repeat方法"></a>repeat方法</h2><ul><li>将指定的字符串重复一定次数<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/string-repeat.png"/></div></div></li></ul><h2 id="trim方法"><a href="#trim方法" class="headerlink" title="trim方法"></a>trim方法</h2><ul><li>去除字符串前后的空格</li></ul><h2 id="toLowerCase方法"><a href="#toLowerCase方法" class="headerlink" title="toLowerCase方法"></a>toLowerCase方法</h2><ul><li>将字符串转换为小写</li></ul><h2 id="toUpperCase方法"><a href="#toUpperCase方法" class="headerlink" title="toUpperCase方法"></a>toUpperCase方法</h2><ul><li>将字符串转换为大写</li></ul><h2 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h2><ul><li>将指定字符串替换为另外字符串</li></ul><h2 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h2><ul><li>通过指定的分隔符(参数)将字符串转化为数组。</li></ul><h2 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h2><ul><li>在字符串中寻找指定字符串或正则，返回找到的字符串</li></ul><h2 id="search方法"><a href="#search方法" class="headerlink" title="search方法"></a>search方法</h2><ul><li>在字符串中寻找指定字符串或正则，返回第一个找到的字符串开始的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex学习笔记</title>
      <link href="/2023/05/12/vuex%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/12/vuex%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p>能够在vuex中集中管理共享的数据，易于开发和后期维护<br>能够高效的实现组件之间的数据共享，提高开发效率<br>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步<br>什么样的数据适合存储到Vuex中<br>一般情况下，<wavy>只有组件之间共享的数据</wavy>，才有必要存储到vuex中；对于组件中的私有数据，<wavy>依旧存储在组件自身的data中即可</wavy></p><h1 id="vuex的基本使用"><a href="#vuex的基本使用" class="headerlink" title="vuex的基本使用"></a>vuex的基本使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h2 id="导入vuex包"><a href="#导入vuex包" class="headerlink" title="导入vuex包"></a>导入vuex包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><h2 id="创建store对象"><a href="#创建store对象" class="headerlink" title="创建store对象"></a>创建store对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const store =new Vuex.store(&#123;</span><br><span class="line">//state中存放的就是全局共享的数据</span><br><span class="line">state:&#123;count:0&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="将store对象挂载到vue实例中"><a href="#将store对象挂载到vue实例中" class="headerlink" title="将store对象挂载到vue实例中"></a>将store对象挂载到vue实例中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el: &#x27;#app&#x27;,</span><br><span class="line">render: h =&gt; h(app),</span><br><span class="line">router,</span><br><span class="line">//将创建的共享数据对象，挂载到Vue实例中</span><br><span class="line">//所有的组件，就可以直接从store中获取全局的数据了</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="vuex中的主要核心概念"><a href="#vuex中的主要核心概念" class="headerlink" title="vuex中的主要核心概念"></a>vuex中的主要核心概念</h1><div class="tabs" id="vuex属性"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#vuex属性-1">state</button></li><li class="tab"><button type="button" data-href="#vuex属性-2">Mutation</button></li><li class="tab"><button type="button" data-href="#vuex属性-3">action</button></li><li class="tab"><button type="button" data-href="#vuex属性-4">getter</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="vuex属性-1"><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p><strong>提供唯一的公共数据源，所有共享的数据都要统一放到store的state中进行存储</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建store数据源，提供唯一的公告数据</span><br><span class="line">const　store　＝　new　Vuex.Store(&#123;</span><br><span class="line">  state:&#123; count: 0 &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 组件访问state中数据的第一种方式 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.state.全局数据名称</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 组件访问state中数据的第二中种方式 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1.从vuex中按需导入mapState函数</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><p>通过刚才导入的mapState函数，将当前组件需要的全局数据，映射为当前组件的computed计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.将全局数据，映射为当前组件的计算属性</span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([&#x27;count&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vuex属性-2"><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p><strong>用于变更Store中的数据</strong><br><strong>只能通过Mutation变更store数据，不可以直接操作store中的数据</strong><br><strong>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有的数据变化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//定义Mutation</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    add(state)&#123;</span><br><span class="line">      //变更状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 触发mutations的第一种方式 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//触发mutation</span><br><span class="line">methods:&#123;</span><br><span class="line">  handlel()&#123;</span><br><span class="line">    //触发mutations的第一种方式</span><br><span class="line">    this.$store.commit(&#x27;add&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在触发mutations时传递参数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//定义Mutation</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    addN(state,step)&#123;</span><br><span class="line">      //变更状态</span><br><span class="line">      state.count += step</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//触发mutation</span><br><span class="line">methods:&#123;</span><br><span class="line">  handlel2()&#123;</span><br><span class="line">    //触发mutations的第一种方式</span><br><span class="line">    this.$store.commit(&#x27;addN&#x27;,3)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" green><summary> 触发mutation的第二种方式 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1.从vuex中按需导入mapMutations函数</span><br><span class="line">import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><p>通过刚才导入的mapMutations函数，将需要的mutations函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.将指定的mutations函数，映射为当前组件的methods函数</span><br><span class="line">methods:&#123;</span><br><span class="line">  ...mapMutations([&#x27;add&#x27;,&#x27;addN&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vuex属性-3"><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p><strong>触发actions异步任务时携带参数</strong></p><details class="folding-tag" green><summary> 定义action </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//定义action</span><br><span class="line">const　store　= new Vuex.Store(&#123;</span><br><span class="line">  //...省略其他代码</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    addN(state,step)&#123;</span><br><span class="line">      state.count += step</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actios:&#123;</span><br><span class="line">    addNAsync(context,step)&#123;</span><br><span class="line">      setTimeout(()=&gt;&#123;</span><br><span class="line">        .context.commit(&#x27;addN&#x27;,step)</span><br><span class="line">      &#125;,1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 第一种触发 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//触发Action</span><br><span class="line">methods:&#123;</span><br><span class="line">  handle()&#123;</span><br><span class="line">    //在调用dispatch参数</span><br><span class="line">    //触发actions时携带参数</span><br><span class="line">    this.$store.dispatch(&#x27;addNAsync&#x27;,5)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 第二中种触发 </summary>              <div class='content'>              <p><strong>this.$store.dispatch()时第一种触发</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1.从vuex中按需导入mapActions函数</span><br><span class="line">import &#123; mapActions &#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br><strong>通过刚才导入的mapActions函数，将需要的actions函数，映射为当前组件的methods方法</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.将指定的actions函数，映射为当前组件的methods函数</span><br><span class="line">methods:&#123;</span><br><span class="line">  ...mapActions([&#x27;addASync&#x27;,&#x27;addNASync&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vuex属性-4"><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p><strong>Getter用于对Store中的数据进行加工处理形成新的数据</strong><br><strong>1.Getter可以对store中已有的数据加工处理之后形成新的数据，类似vue的计算属性</strong><br><strong>2.store中数据发生变化，getter的数据也会跟着变化</strong></p><p>定义getter<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const　store　= new Vuex.Store(&#123;</span><br><span class="line">  //...省略其他代码</span><br><span class="line">  state:&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  getter:&#123;</span><br><span class="line">    showNum : state =&gt; &#123;</span><br><span class="line">      return &#x27;当前最新的数量时[&#x27;+state.count +&#x27;]&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 第一种方式 </summary>              <div class='content'>              <p><strong>this.$store.getters.名称 第一种触发</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.getters.名称</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" green><summary> 第二种方式 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([&#x27;showNum&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h1><div class="tip ban"><p>Newline required at end of file but not found eol-last</p></div><p>还是vue项目中代码格式 的原因导致的以下错误：<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/err_1.png"/></div></div><br>原因：最后一行需要留空白<br>即以下解决方式：<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic-bed-img.aotuji.cn/img/err_2.png"/></div></div><br> 即便是最后一行不写也得留出一行空白。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node天下无敌</title>
      <link href="/2023/05/10/node%E5%A4%A9%E4%B8%8B%E6%97%A0%E6%95%8C-1/"/>
      <url>/2023/05/10/node%E5%A4%A9%E4%B8%8B%E6%97%A0%E6%95%8C-1/</url>
      
        <content type="html"><![CDATA[<h2 id="html的标签很重要的"><a href="#html的标签很重要的" class="headerlink" title="html的标签很重要的"></a>html的标签很重要的</h2><div align="center" class="aspect-ratio">  <iframe    src="https://player.bilibili.com/player.html?aid=556933559&&page=1&as_wide=1&high_quality=1&danmaku=0"    scrolling="no"    border="0"    frameborder="no"    framespacing="0"    high_quality="1"    danmaku="1"    allowfullscreen="true"  ></iframe></div>]]></content>
      
      
      <categories>
          
          <category> node天下无敌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node天下无敌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常的生活</title>
      <link href="/2023/05/10/%E6%97%A5%E5%B8%B8%E7%9A%84%E7%94%9F%E6%B4%BB-1/"/>
      <url>/2023/05/10/%E6%97%A5%E5%B8%B8%E7%9A%84%E7%94%9F%E6%B4%BB-1/</url>
      
        <content type="html"><![CDATA[<h2 id="html的标签很重要的"><a href="#html的标签很重要的" class="headerlink" title="html的标签很重要的"></a>html的标签很重要的</h2>]]></content>
      
      
      <categories>
          
          <category> 日常的生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常的生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端三剑客</title>
      <link href="/2023/05/10/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2-1/"/>
      <url>/2023/05/10/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2-1/</url>
      
        <content type="html"><![CDATA[<h2 id="html的标签很重要的"><a href="#html的标签很重要的" class="headerlink" title="html的标签很重要的"></a>html的标签很重要的</h2>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三剑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么叫C#</title>
      <link href="/2023/05/10/%E4%BB%80%E4%B9%88%E5%8F%ABC/"/>
      <url>/2023/05/10/%E4%BB%80%E4%B9%88%E5%8F%ABC/</url>
      
        <content type="html"><![CDATA[<h2 id="html的标签很重要的"><a href="#html的标签很重要的" class="headerlink" title="html的标签很重要的"></a>html的标签很重要的</h2>]]></content>
      
      
      <categories>
          
          <category> 什么叫C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 什么叫C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>胡思乱想</title>
      <link href="/2023/05/10/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3-1/"/>
      <url>/2023/05/10/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3-1/</url>
      
        <content type="html"><![CDATA[<h2 id="html的标签很重要的"><a href="#html的标签很重要的" class="headerlink" title="html的标签很重要的"></a>html的标签很重要的</h2>]]></content>
      
      
      <categories>
          
          <category> 胡思乱想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡思乱想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程学习</title>
      <link href="/2023/05/10/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/2023/05/10/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<h2 id="html的标签很重要的"><a href="#html的标签很重要的" class="headerlink" title="html的标签很重要的"></a>html的标签很重要的</h2>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/10/hello-world/"/>
      <url>/2023/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
